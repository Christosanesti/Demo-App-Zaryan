generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  name              String?
  email             String   @unique
  password          String?
  role              String   @default("user")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  daybookEntries    DaybookEntry[]
  inventoryPurchases InventoryPurchase[]
  customers         Customer[]
  sales             Sale[]
  purchases         Purchase[]
  stocks            Stock[]
  items             Item[]
  ledgerEntries     LedgerEntry[]
  installments      Installment[]
  settings          UserSettings?
  references        Reference[]
  staff             Staff[]
  inventory         Inventory[]
}

model UserSettings {
  userId    String   @id
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LedgerEntry {
  id            String        @id @default(cuid())
  type          LedgerType
  title         String
  amount        Float
  description   String?
  transactionType TransactionType
  paymentMethod PaymentMethod
  date          DateTime
  userId        String
  customerId    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer      Customer?     @relation(fields: [customerId], references: [id])

  @@index([userId])
  @@index([date])
  @@index([type])
  @@index([customerId])
}

model DaybookEntry {
  id            String        @id @default(cuid())
  date          DateTime
  type          String
  amount        Float
  description   String?
  reference     String?
  category      String?
  paymentMethod String?
  status        String?
  notes         String?
  userId        String
  userName      String?
  customerId    String?
  saleId        String?       @unique
  installmentId String?       @unique
  stockId       String?       @unique
  purchaseId    String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer      Customer?     @relation(fields: [customerId], references: [id])
  sale          Sale?         @relation(fields: [saleId], references: [id])
  installment   Installment?  @relation(fields: [installmentId], references: [id])
  stock         Stock?        @relation(fields: [stockId], references: [id])
  purchase      Purchase?     @relation(fields: [purchaseId], references: [id])

  @@index([userId])
  @@index([date])
  @@index([customerId])
  @@index([saleId])
  @@index([installmentId])
  @@index([stockId])
  @@index([purchaseId])
}

model Stock {
  id            String        @id @default(cuid())
  name          String
  quantity      Int
  price         Float
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  daybookEntry  DaybookEntry?

  @@index([userId])
  @@index([name])
}

model Ledger {
  id          String   @id @default(cuid())
  name        String
  type        String   // "income" or "expense"
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bank {
  id            String   @id @default(cuid())
  name          String
  accountNumber String
  balance       Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Customer {
  id              String   @id @default(cuid())
  name            String
  phone           String?
  address         String?
  photoUrl        String?
  guarantorName   String?
  guarantorPhone  String?
  guarantorAddress String?
  documentsUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  userName        String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales           Sale[]
  daybookEntries  DaybookEntry[]
  ledgerEntries   LedgerEntry[]

  @@index([userId])
  @@index([name])
  @@index([phone])
}

model Sale {
  id            String        @id @default(cuid())
  userId        String
  customerId    String
  itemId        String
  reference     String        @unique
  totalAmount   Float
  advanceAmount Float         @default(0)
  paymentMode   PaymentMode
  duration      Int          // Number of months
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer      Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  item          Item         @relation(fields: [itemId], references: [id])
  installments  Installment[]
  daybookEntry  DaybookEntry?
  inventory     Inventory?   @relation(fields: [inventoryId], references: [id])
  inventoryId   String?

  @@index([userId])
  @@index([customerId])
}

model Installment {
  id            String        @id @default(cuid())
  saleId        String
  userId        String
  amount        Float
  dueDate       DateTime
  status        InstallmentStatus @default(PENDING)
  paymentMode   PaymentMode?
  paidAt        DateTime?
  paidBy        String?      // User ID who received the payment
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  sale          Sale         @relation(fields: [saleId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  daybookEntry  DaybookEntry?

  @@index([saleId])
  @@index([userId])
  @@index([dueDate])
}

model Purchase {
  id            String        @id @default(cuid())
  itemId        String
  quantity      Int
  totalAmount   Float
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  item          Item          @relation(fields: [itemId], references: [id])
  daybookEntry  DaybookEntry?
  inventoryItems InventoryPurchaseItem[]

  @@index([userId])
  @@index([itemId])
}

model Staff {
  id            String   @id @default(cuid())
  name          String
  role          String
  phone         String?
  email         String?
  address       String?
  photoUrl      String?
  documentsUrl  String?
  userId        String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
  @@index([role])
  @@index([email])
}

model Reference {
  id            String   @id @default(cuid())
  name          String
  type          String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model Item {
  id            String        @id @default(cuid())
  name          String
  description   String?
  price         Float
  quantity      Int
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales         Sale[]
  purchases     Purchase[]

  @@index([userId])
  @@index([name])
}

enum PaymentMode {
  CASH
  BANK
  MOBILE
  CREDIT
  OTHER
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum LedgerType {
  INCOME
  EXPENSE
  TRANSFER
  ADJUSTMENT
  CUSTOM
}

enum TransactionType {
  DEBIT
  CREDIT
  TRANSFER
  ADJUSTMENT
}

enum InstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

enum DaybookType {
  INCOME
  EXPENSE
  TRANSFER
  ADJUSTMENT
}

enum PaymentMethod {
  CASH
  BANK
  MOBILE
  CREDIT
  OTHER
}

model Inventory {
  id            String        @id @default(cuid())
  name          String
  description   String?
  quantity      Int
  unit          String        @default("piece")
  price         Float
  category      String        @default("uncategorized")
  sku           String?
  barcode       String?
  location      String?
  minStock      Int          @default(0)
  maxStock      Int?
  supplier      String?
  notes         String?
  userId        String
  userName      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchaseItems InventoryPurchaseItem[]
  sales         Sale[]

  @@index([userId])
  @@index([name])
  @@index([category])
  @@index([sku])
  @@index([barcode])
}

model InventoryPurchaseItem {
  id            String        @id @default(cuid())
  quantity      Int
  unitPrice     Float
  totalPrice    Float
  purchaseId    String
  inventoryId   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  purchase      Purchase      @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  inventory     Inventory     @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([purchaseId])
  @@index([inventoryId])
}

model InventoryPurchase {
  id            String   @id @default(cuid())
  date          DateTime
  productName   String
  quantity      Float
  unit          String
  price         Float
  category      String
  supplier      String
  paymentMethod String
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}
// prisma/schema.prisma
datasource db {
  provider  = "mysql"
  url  	    = env("DATABASE_URL")
}
model User {
  id            String   @id
  email         String?  @unique
  name          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  settings      UserSettings?
  daybookEntries DaybookEntry[]
  stocks        Stock[]
  customers     Customer[]
  sales         Sale[]
  installments  Installment[]
  purchases     Purchase[]
  suppliers     Supplier[]
  inventory     Inventory[]
  ledgerEntries LedgerEntry[]
  references    Reference[]
  staff         Staff[]

  @@index([email])
}

model UserSettings {
  userId    String   @id
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LedgerEntry {
  id              String      @id @default(cuid())
  type            LedgerType
  customType      String?     
  title           String
  description     String?
  amount          Float
  transactionType TransactionType
  date            DateTime
  reference       String?
  category        String?
  paymentMethod   PaymentMode?
  tags            String?     
  userId          String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([category])
  @@index([type])
  @@index([transactionType])
}

model DaybookEntry {
  id            String   @id @default(cuid())
  date          DateTime
  type          String   
  amount        Float
  description   String
  reference     String   
  category      String?  
  paymentMethod String?  
  status        String?  
  attachments   String?  
  notes         String?  
  userId        String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stockId       String?  @unique
  stock         Stock?   @relation(fields: [stockId], references: [id])
  saleId        String?  @unique
  sale          Sale?    @relation(fields: [saleId], references: [id])
  installmentId String?  @unique
  installment   Installment? @relation(fields: [installmentId], references: [id])
  purchaseId    String?  @unique
  purchase      Purchase? @relation(fields: [purchaseId], references: [id])

  @@index([userId])
  @@index([reference])
  @@index([date])
  @@index([type])
  @@index([status])
}

model Stock {
  id            String   @id @default(cuid())
  date          DateTime
  productName   String
  amount        Float
  quantity      Int
  description   String?
  userId        String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  daybookEntry  DaybookEntry?

  @@index([userId])
  @@index([date])
  @@index([productName])
}

model Ledger {
  id          String   @id @default(cuid())
  name        String
  type        String   // "income" or "expense"
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bank {
  id            String   @id @default(cuid())
  name          String
  accountNumber String
  balance       Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Customer {
  id              String   @id @default(cuid())
  name            String
  phone           String?
  address         String?
  photoUrl        String?
  guarantorName   String?
  guarantorPhone  String?
  guarantorAddress String?
  guarantorPhotoUrl String?
  documentsUrl    String?
  userId          String
  userName        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales           Sale[]
  installments    Installment[]

  @@index([userId])
  @@index([name])
  @@index([phone])
}

model Sale {
  id              String      @id @default(cuid())
  date            DateTime
  amount          Float
  description     String?
  customerId      String
  userId          String
  userName        String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  itemId          String
  advance         Float       @default(0)
  paymentMode     PaymentMode
  installmentMonths Int       @default(1)

  customer        Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  item            Inventory   @relation(fields: [itemId], references: [id])
  daybookEntry    DaybookEntry?
  installments    Installment[]

  @@index([customerId])
  @@index([userId])
  @@index([date])
  @@index([paymentMode])
}

model Installment {
  id            String   @id @default(cuid())
  date          DateTime
  amount        Float
  description   String?
  customerId    String
  userId        String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  saleId        String
  dueDate       DateTime
  paid          Boolean  @default(false)
  paidAt        DateTime?
  paymentMode   PaymentMode?
  receivedBy    String?

  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sale          Sale     @relation(fields: [saleId], references: [id])
  daybookEntry  DaybookEntry?

  @@index([customerId])
  @@index([userId])
  @@index([date])
  @@index([dueDate])
  @@index([paid])
}

model Purchase {
  id            String   @id @default(cuid())
  date          DateTime
  amount        Float
  description   String?
  productName   String
  quantity      Int      @default(1)
  unitPrice     Float
  totalAmount   Float
  supplierId    String?
  userId        String
  userName      String
  category      String?
  paymentMethod PaymentMode @default(CASH)
  status        PurchaseStatus @default(COMPLETED)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  supplier      Supplier? @relation(fields: [supplierId], references: [id])
  daybookEntry  DaybookEntry?

  @@index([userId])
  @@index([supplierId])
  @@index([date])
  @@index([status])
  @@index([paymentMethod])
}

model Supplier {
  id            String   @id @default(cuid())
  name          String
  phone         String?
  address       String?
  email         String?
  photoUrl      String?
  documentsUrl  String?
  userId        String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases     Purchase[]

  @@index([userId])
  @@index([name])
  @@index([phone])
  @@index([email])
}

model Inventory {
  id            String   @id @default(cuid())
  name          String
  description   String?
  quantity      Int      @default(0)
  unitPrice     Float
  category      String?
  location      String?
  userId        String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales         Sale[]
  purchaseItems InventoryPurchaseItem[]

  @@index([userId])
  @@index([name])
  @@index([category])
}

model InventoryPurchaseItem {
  id            String   @id @default(cuid())
  inventoryId   String
  purchaseId    String
  quantity      Int
  unitPrice     Float
  totalAmount   Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  inventory     Inventory @relation(fields: [inventoryId], references: [id])

  @@index([inventoryId])
  @@index([purchaseId])
}

model Staff {
  id            String   @id @default(cuid())
  name          String
  role          String
  phone         String?
  email         String?
  address       String?
  photoUrl      String?
  documentsUrl  String?
  userId        String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
  @@index([role])
  @@index([email])
}

model Reference {
  id            String   @id @default(cuid())
  name          String
  type          String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

enum PaymentMode {
  CASH
  BANK
  MOBILE
  CREDIT
  OTHER
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum LedgerType {
  INCOME
  EXPENSE
  TRANSFER
  ADJUSTMENT
  CUSTOM
}

enum TransactionType {
  DEBIT
  CREDIT
  TRANSFER
  ADJUSTMENT
}

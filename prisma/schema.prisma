// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}
// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  daybookEntries DaybookEntry[]
  stocks        Stock[]
  customers     Customer[]
  sales         Sale[]
  installments  Installment[]
  purchases     Purchase[]
  suppliers     Supplier[]
  inventory     Inventory[]
  userSettings  UserSettings?
  ledgerEntries LedgerEntry[]
  references    Reference[]
  staff         Staff[]
}

model UserSettings {
  id        String   @id @default(cuid())
  userId    String   @unique
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LedgerEntry {
  id              String      @id @default(cuid())
  type            LedgerType
  customType      String?     // For custom ledger types
  title           String
  description     String?
  amount          Float
  transactionType TransactionType
  date            DateTime
  reference       String?
  category        String?
  paymentMethod   PaymentMode?
  tags            String?     // Comma-separated tags
  userId          String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relationships
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([category])
}

model DaybookEntry {
  id          String   @id @default(cuid())
  date        DateTime
  type        String   // "income" or "expense"
  amount      Float
  description String
  reference   String   // Reference to ledger, bank, or customer
  category    String?  // Category for the entry
  paymentMethod String? // "cash", "bank", or "mobile"
  status      String?  // "completed", "pending", or "cancelled"
  attachments String?  // File attachments URLs
  notes       String?  // Additional notes
  userId      String
  userName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stockId     String?  @unique
  stock       Stock?   @relation(fields: [stockId], references: [id])
  saleId      String?  @unique
  sale        Sale?    @relation(fields: [saleId], references: [id])
  installmentId String? @unique
  installment Installment? @relation(fields: [installmentId], references: [id])
  purchaseId  String?  @unique
  purchase    Purchase? @relation(fields: [purchaseId], references: [id])

  @@index([userId])
  @@index([reference])
  @@index([date])
  @@index([type])
}

model Stock {
  id          String   @id @default(cuid())
  date        DateTime
  productName String
  amount      Float
  quantity    Int
  description String?
  userId      String
  userName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  daybookEntry DaybookEntry?

  @@index([userId])
  @@index([date])
  @@index([productName])
}

model Ledger {
  id          String   @id @default(cuid())
  name        String
  type        String   // "income" or "expense"
  balance     Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Bank {
  id            String   @id @default(cuid())
  name          String
  accountNumber String
  balance       Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Customer {
  id            String   @id @default(cuid())
  name          String
  phone         String?
  address       String?
  photoUrl      String?
  guarantorName String?
  guarantorPhone String?
  guarantorAddress String?
  guarantorPhotoUrl String?
  documentsUrl  String?
  userId        String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales         Sale[]
  installments  Installment[]

  @@index([userId])
  @@index([name])
  @@index([phone])
}

model Sale {
  id            String      @id @default(cuid())
  date          DateTime
  amount        Float
  description   String?
  customerId    String
  userId        String
  userName      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // New fields for sales management
  itemId        String
  advance       Float     @default(0)
  paymentMode   PaymentMode
  installmentMonths Int   @default(1)
  installments  Installment[]

  // Relationships
  customer      Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  item          Inventory @relation(fields: [itemId], references: [id])
  daybookEntry  DaybookEntry?

  @@index([customerId])
  @@index([userId])
  @@index([date])
}

model Installment {
  id          String   @id @default(cuid())
  date        DateTime
  amount      Float
  description String?
  customerId  String
  userId      String
  userName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // New fields for sales management
  saleId      String
  dueDate     DateTime
  paid        Boolean  @default(false)
  paidAt      DateTime?
  paymentMode PaymentMode?
  receivedBy  String?

  // Relationships
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sale        Sale     @relation(fields: [saleId], references: [id])
  daybookEntry DaybookEntry?

  @@index([customerId])
  @@index([userId])
  @@index([date])
}

model Purchase {
  id            String   @id @default(cuid())
  date          DateTime
  amount        Float
  description   String?
  productName   String
  quantity      Int      @default(1)
  unitPrice     Float
  totalAmount   Float
  supplierId    String?
  userId        String
  userName      String
  category      String?
  paymentMethod PaymentMode @default(CASH)
  status        PurchaseStatus @default(COMPLETED)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  supplier      Supplier? @relation(fields: [supplierId], references: [id])
  daybookEntry  DaybookEntry?
  inventoryItems InventoryPurchaseItem[]

  @@index([supplierId])
  @@index([date])
  @@index([userId])
  @@index([productName])
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  email       String?  @unique
  phone       String?
  address     String?
  balance     Float    @default(0)
  userId      String
  userName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  purchases   Purchase[]

  @@index([userId])
  @@index([name])
}

model Inventory {
  id          String   @id @default(cuid())
  name        String
  description String?
  quantity    Int      @default(0)
  price       Float
  costPrice   Float?   // Purchase cost price
  sellingPrice Float?  // Selling price
  category    String?
  userId      String
  userName    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales       Sale[]
  purchaseItems InventoryPurchaseItem[]

  @@index([name])
  @@index([userId])
  @@index([category])
}

model InventoryPurchaseItem {
  id          String   @id @default(cuid())
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  purchaseId  String
  inventoryId String
  createdAt   DateTime @default(now())

  // Relationships
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([purchaseId])
  @@index([inventoryId])
}

model Staff {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  position    String
  department  String
  salary      Float
  joiningDate DateTime
  status      String   // "active", "inactive", "on_leave"
  documents   String[] // Array of document URLs
  notes       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([department])
  @@index([status])
}

model Reference {
  id        String   @id @default(cuid())
  name      String
  type      String   // "ledger", "bank", "customer"
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, type, userId])
}

enum PaymentMode {
  CASH
  BANK
  MOBILE
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum LedgerType {
  BANK
  EXPENSE
  SALARY
  PURCHASE
  SALE
  CUSTOMER
  CUSTOM
}

enum TransactionType {
  DEBIT
  CREDIT
}
